<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Doctrine\ORM\TransactionRequiredException;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * CategoryRepository constructor.
     * @param EntityManagerInterface $em
     * @param Mapping\ClassMetadata $class
     */
    public function __construct(EntityManagerInterface $em, Mapping\ClassMetadata $class = null)
    {
        parent::__construct($em, $class == null ? new Mapping\ClassMetadata(Category::class) : $class);
    }

    /**
     * @param int $id
     * @return Category|null
     */
    public function getOneById(int $id): ?Category
    {
        try {
            return $this->_em->find('AppBundle:Category', $id);
        } catch (OptimisticLockException $e) {
            return null;
        } catch (TransactionRequiredException $e) {
            return null;
        } catch (ORMException $e) {
            return null;
        }
    }

    /**
     * @return array|null
     */
    public function getAll(): ?array {
        return $this->_em->getRepository(Category::class)
            ->findAll();
    }

    /**
     * @param Category $category
     * @return bool
     */
    public function insert(Category $category): bool
    {
        try {
            $this->_em->persist($category);
            $this->_em->flush();

            return true;
        } catch (OptimisticLockException $e) {
            return false;
        }
    }

    /**
     * @param Category $category
     * @return bool
     */
    public function update(Category $category): bool
    {
        try {
            $this->_em->merge($category);
            $this->_em->flush();

            return true;
        } catch (OptimisticLockException $e) {
            return false;
        }
    }

    /**
     * @param Category $category
     * @return bool
     */
    public function delete(Category $category): bool
    {
        try {
            $this->_em->remove($category);
            $this->_em->flush();

            return true;
        } catch (OptimisticLockException $e) {
            return false;
        }
    }

}
